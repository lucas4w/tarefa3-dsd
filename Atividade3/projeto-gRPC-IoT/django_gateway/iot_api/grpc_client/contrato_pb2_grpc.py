# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import contrato_pb2 as contrato__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in contrato_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MonitorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegistrarUsuario = channel.unary_unary(
                '/MonitorService/RegistrarUsuario',
                request_serializer=contrato__pb2.RegistrarUsuarioRequest.SerializeToString,
                response_deserializer=contrato__pb2.RegistrarUsuarioResponse.FromString,
                _registered_method=True)
        self.RegistrarSensor = channel.unary_unary(
                '/MonitorService/RegistrarSensor',
                request_serializer=contrato__pb2.RegistrarSensorRequest.SerializeToString,
                response_deserializer=contrato__pb2.RegistrarSensorResponse.FromString,
                _registered_method=True)
        self.EnviarDadosSensor = channel.unary_unary(
                '/MonitorService/EnviarDadosSensor',
                request_serializer=contrato__pb2.SensorData.SerializeToString,
                response_deserializer=contrato__pb2.StatusResposta.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/MonitorService/GetUser',
                request_serializer=contrato__pb2.UserData.SerializeToString,
                response_deserializer=contrato__pb2.UserResponse.FromString,
                _registered_method=True)
        self.ListarSensores = channel.unary_unary(
                '/MonitorService/ListarSensores',
                request_serializer=contrato__pb2.ListarSensoresRequest.SerializeToString,
                response_deserializer=contrato__pb2.SensoresResponse.FromString,
                _registered_method=True)
        self.GetDados = channel.unary_unary(
                '/MonitorService/GetDados',
                request_serializer=contrato__pb2.DadosRequest.SerializeToString,
                response_deserializer=contrato__pb2.DadosResponse.FromString,
                _registered_method=True)
        self.GenerateData = channel.unary_unary(
                '/MonitorService/GenerateData',
                request_serializer=contrato__pb2.GenerateDataRequest.SerializeToString,
                response_deserializer=contrato__pb2.GenerateDataResponse.FromString,
                _registered_method=True)


class MonitorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegistrarUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegistrarSensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnviarDadosSensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListarSensores(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDados(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegistrarUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistrarUsuario,
                    request_deserializer=contrato__pb2.RegistrarUsuarioRequest.FromString,
                    response_serializer=contrato__pb2.RegistrarUsuarioResponse.SerializeToString,
            ),
            'RegistrarSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistrarSensor,
                    request_deserializer=contrato__pb2.RegistrarSensorRequest.FromString,
                    response_serializer=contrato__pb2.RegistrarSensorResponse.SerializeToString,
            ),
            'EnviarDadosSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.EnviarDadosSensor,
                    request_deserializer=contrato__pb2.SensorData.FromString,
                    response_serializer=contrato__pb2.StatusResposta.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=contrato__pb2.UserData.FromString,
                    response_serializer=contrato__pb2.UserResponse.SerializeToString,
            ),
            'ListarSensores': grpc.unary_unary_rpc_method_handler(
                    servicer.ListarSensores,
                    request_deserializer=contrato__pb2.ListarSensoresRequest.FromString,
                    response_serializer=contrato__pb2.SensoresResponse.SerializeToString,
            ),
            'GetDados': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDados,
                    request_deserializer=contrato__pb2.DadosRequest.FromString,
                    response_serializer=contrato__pb2.DadosResponse.SerializeToString,
            ),
            'GenerateData': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateData,
                    request_deserializer=contrato__pb2.GenerateDataRequest.FromString,
                    response_serializer=contrato__pb2.GenerateDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MonitorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MonitorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MonitorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegistrarUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MonitorService/RegistrarUsuario',
            contrato__pb2.RegistrarUsuarioRequest.SerializeToString,
            contrato__pb2.RegistrarUsuarioResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegistrarSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MonitorService/RegistrarSensor',
            contrato__pb2.RegistrarSensorRequest.SerializeToString,
            contrato__pb2.RegistrarSensorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnviarDadosSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MonitorService/EnviarDadosSensor',
            contrato__pb2.SensorData.SerializeToString,
            contrato__pb2.StatusResposta.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MonitorService/GetUser',
            contrato__pb2.UserData.SerializeToString,
            contrato__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListarSensores(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MonitorService/ListarSensores',
            contrato__pb2.ListarSensoresRequest.SerializeToString,
            contrato__pb2.SensoresResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDados(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MonitorService/GetDados',
            contrato__pb2.DadosRequest.SerializeToString,
            contrato__pb2.DadosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MonitorService/GenerateData',
            contrato__pb2.GenerateDataRequest.SerializeToString,
            contrato__pb2.GenerateDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
